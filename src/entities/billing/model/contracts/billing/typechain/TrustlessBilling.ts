/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from 'shared/lib/contracts/common';

export declare namespace ITrustlessBilling {
  export type SignedPaymentStruct = {
    amountAccumulated: BigNumberish;
    signature: BytesLike;
  };

  export type SignedPaymentStructOutput = [amountAccumulated: bigint, signature: string] & {
    amountAccumulated: bigint;
    signature: string;
  };

  export type UnsignedPaymentStruct = {
    amount: BigNumberish;
    user: AddressLike;
  };

  export type UnsignedPaymentStructOutput = [amount: bigint, user: string] & {
    amount: bigint;
    user: string;
  };
}

export interface TrustlessBillingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'WATERMARK_SIGNED_MESSAGE'
      | 'canPayTheAmount'
      | 'canUseService'
      | 'canWithdraw'
      | 'cancelWithdrawal'
      | 'confirmStatusChanges'
      | 'executePayments'
      | 'executePaymentsAndConfirmStatusChanges'
      | 'initialize'
      | 'lockFunds'
      | 'owner'
      | 'renounceOwnership'
      | 'requestTrustlessBilling'
      | 'requestWithdrawal'
      | 'switchToTrustfulBilling'
      | 'token'
      | 'topUp'
      | 'transferOwnership'
      | 'users'
      | 'withdraw',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Initialized'
      | 'OwnershipTransferred'
      | 'PaymentExecuted'
      | 'StatusChangeConfirmed'
      | 'TopUp'
      | 'TrustlessBillingCancelled'
      | 'TrustlessBillingRequested'
      | 'Withdraw'
      | 'WithdrawalCancelled'
      | 'WithdrawalRequested',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'WATERMARK_SIGNED_MESSAGE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'canPayTheAmount', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'canUseService', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'canWithdraw', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'cancelWithdrawal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'confirmStatusChanges', values: [AddressLike[], AddressLike[]]): string;
  encodeFunctionData(
    functionFragment: 'executePayments',
    values: [ITrustlessBilling.SignedPaymentStruct[], ITrustlessBilling.UnsignedPaymentStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'executePaymentsAndConfirmStatusChanges',
    values: [
      ITrustlessBilling.SignedPaymentStruct[],
      ITrustlessBilling.UnsignedPaymentStruct[],
      AddressLike[],
      AddressLike[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'lockFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestTrustlessBilling', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestWithdrawal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'switchToTrustfulBilling', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'topUp', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'users', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'WATERMARK_SIGNED_MESSAGE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canPayTheAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canUseService', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmStatusChanges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executePayments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executePaymentsAndConfirmStatusChanges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestTrustlessBilling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'switchToTrustfulBilling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'topUp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentExecutedEvent {
  export type InputTuple = [sum: BigNumberish];
  export type OutputTuple = [sum: bigint];
  export interface OutputObject {
    sum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusChangeConfirmedEvent {
  export type InputTuple = [withdrawalStatusChangeUsers: AddressLike[], billingStatusChangeUsers: AddressLike[]];
  export type OutputTuple = [withdrawalStatusChangeUsers: string[], billingStatusChangeUsers: string[]];
  export interface OutputObject {
    withdrawalStatusChangeUsers: string[];
    billingStatusChangeUsers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopUpEvent {
  export type InputTuple = [user: AddressLike, balance: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [user: string, balance: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    balance: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustlessBillingCancelledEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustlessBillingRequestedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, balance: BigNumberish];
  export type OutputTuple = [user: string, balance: bigint];
  export interface OutputObject {
    user: string;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalCancelledEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalRequestedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustlessBilling extends BaseContract {
  connect(runner?: ContractRunner | null): TrustlessBilling;
  waitForDeployment(): Promise<this>;

  interface: TrustlessBillingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  WATERMARK_SIGNED_MESSAGE: TypedContractMethod<[], [string], 'view'>;

  canPayTheAmount: TypedContractMethod<[user: AddressLike, amount: BigNumberish], [boolean], 'view'>;

  canUseService: TypedContractMethod<[user: AddressLike], [boolean], 'view'>;

  canWithdraw: TypedContractMethod<[user: AddressLike], [boolean], 'view'>;

  cancelWithdrawal: TypedContractMethod<[], [void], 'nonpayable'>;

  confirmStatusChanges: TypedContractMethod<
    [withdrawalStatusChangeUsers: AddressLike[], billingStatusChangeUsers: AddressLike[]],
    [void],
    'nonpayable'
  >;

  executePayments: TypedContractMethod<
    [
      signedPayments: ITrustlessBilling.SignedPaymentStruct[],
      unsignedPayments: ITrustlessBilling.UnsignedPaymentStruct[],
    ],
    [void],
    'nonpayable'
  >;

  executePaymentsAndConfirmStatusChanges: TypedContractMethod<
    [
      signedPayments: ITrustlessBilling.SignedPaymentStruct[],
      unsignedPayments: ITrustlessBilling.UnsignedPaymentStruct[],
      withdrawalStatusChangeUsers: AddressLike[],
      billingStatusChangeUsers: AddressLike[],
    ],
    [void],
    'nonpayable'
  >;

  initialize: TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>;

  lockFunds: TypedContractMethod<[], [void], 'nonpayable'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  requestTrustlessBilling: TypedContractMethod<[], [void], 'nonpayable'>;

  requestWithdrawal: TypedContractMethod<[], [void], 'nonpayable'>;

  switchToTrustfulBilling: TypedContractMethod<[], [void], 'nonpayable'>;

  token: TypedContractMethod<[], [string], 'view'>;

  topUp: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        balance: bigint;
        paidAmount: bigint;
        withdrawalStatus: bigint;
        billingStatus: bigint;
      },
    ],
    'view'
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'WATERMARK_SIGNED_MESSAGE'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'canPayTheAmount',
  ): TypedContractMethod<[user: AddressLike, amount: BigNumberish], [boolean], 'view'>;
  getFunction(nameOrSignature: 'canUseService'): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'canWithdraw'): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(nameOrSignature: 'cancelWithdrawal'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'confirmStatusChanges',
  ): TypedContractMethod<
    [withdrawalStatusChangeUsers: AddressLike[], billingStatusChangeUsers: AddressLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executePayments',
  ): TypedContractMethod<
    [
      signedPayments: ITrustlessBilling.SignedPaymentStruct[],
      unsignedPayments: ITrustlessBilling.UnsignedPaymentStruct[],
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'executePaymentsAndConfirmStatusChanges',
  ): TypedContractMethod<
    [
      signedPayments: ITrustlessBilling.SignedPaymentStruct[],
      unsignedPayments: ITrustlessBilling.UnsignedPaymentStruct[],
      withdrawalStatusChangeUsers: AddressLike[],
      billingStatusChangeUsers: AddressLike[],
    ],
    [void],
    'nonpayable'
  >;
  getFunction(nameOrSignature: 'initialize'): TypedContractMethod<[_token: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'lockFunds'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'requestTrustlessBilling'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'requestWithdrawal'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'switchToTrustfulBilling'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'token'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'topUp'): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'users'): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        balance: bigint;
        paidAmount: bigint;
        withdrawalStatus: bigint;
        billingStatus: bigint;
      },
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'PaymentExecuted',
  ): TypedContractEvent<
    PaymentExecutedEvent.InputTuple,
    PaymentExecutedEvent.OutputTuple,
    PaymentExecutedEvent.OutputObject
  >;
  getEvent(
    key: 'StatusChangeConfirmed',
  ): TypedContractEvent<
    StatusChangeConfirmedEvent.InputTuple,
    StatusChangeConfirmedEvent.OutputTuple,
    StatusChangeConfirmedEvent.OutputObject
  >;
  getEvent(key: 'TopUp'): TypedContractEvent<TopUpEvent.InputTuple, TopUpEvent.OutputTuple, TopUpEvent.OutputObject>;
  getEvent(
    key: 'TrustlessBillingCancelled',
  ): TypedContractEvent<
    TrustlessBillingCancelledEvent.InputTuple,
    TrustlessBillingCancelledEvent.OutputTuple,
    TrustlessBillingCancelledEvent.OutputObject
  >;
  getEvent(
    key: 'TrustlessBillingRequested',
  ): TypedContractEvent<
    TrustlessBillingRequestedEvent.InputTuple,
    TrustlessBillingRequestedEvent.OutputTuple,
    TrustlessBillingRequestedEvent.OutputObject
  >;
  getEvent(
    key: 'Withdraw',
  ): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
  getEvent(
    key: 'WithdrawalCancelled',
  ): TypedContractEvent<
    WithdrawalCancelledEvent.InputTuple,
    WithdrawalCancelledEvent.OutputTuple,
    WithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: 'WithdrawalRequested',
  ): TypedContractEvent<
    WithdrawalRequestedEvent.InputTuple,
    WithdrawalRequestedEvent.OutputTuple,
    WithdrawalRequestedEvent.OutputObject
  >;

  filters: {
    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'PaymentExecuted(uint256)': TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;
    PaymentExecuted: TypedContractEvent<
      PaymentExecutedEvent.InputTuple,
      PaymentExecutedEvent.OutputTuple,
      PaymentExecutedEvent.OutputObject
    >;

    'StatusChangeConfirmed(address[],address[])': TypedContractEvent<
      StatusChangeConfirmedEvent.InputTuple,
      StatusChangeConfirmedEvent.OutputTuple,
      StatusChangeConfirmedEvent.OutputObject
    >;
    StatusChangeConfirmed: TypedContractEvent<
      StatusChangeConfirmedEvent.InputTuple,
      StatusChangeConfirmedEvent.OutputTuple,
      StatusChangeConfirmedEvent.OutputObject
    >;

    'TopUp(address,uint256,uint256)': TypedContractEvent<
      TopUpEvent.InputTuple,
      TopUpEvent.OutputTuple,
      TopUpEvent.OutputObject
    >;
    TopUp: TypedContractEvent<TopUpEvent.InputTuple, TopUpEvent.OutputTuple, TopUpEvent.OutputObject>;

    'TrustlessBillingCancelled(address)': TypedContractEvent<
      TrustlessBillingCancelledEvent.InputTuple,
      TrustlessBillingCancelledEvent.OutputTuple,
      TrustlessBillingCancelledEvent.OutputObject
    >;
    TrustlessBillingCancelled: TypedContractEvent<
      TrustlessBillingCancelledEvent.InputTuple,
      TrustlessBillingCancelledEvent.OutputTuple,
      TrustlessBillingCancelledEvent.OutputObject
    >;

    'TrustlessBillingRequested(address)': TypedContractEvent<
      TrustlessBillingRequestedEvent.InputTuple,
      TrustlessBillingRequestedEvent.OutputTuple,
      TrustlessBillingRequestedEvent.OutputObject
    >;
    TrustlessBillingRequested: TypedContractEvent<
      TrustlessBillingRequestedEvent.InputTuple,
      TrustlessBillingRequestedEvent.OutputTuple,
      TrustlessBillingRequestedEvent.OutputObject
    >;

    'Withdraw(address,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;

    'WithdrawalCancelled(address)': TypedContractEvent<
      WithdrawalCancelledEvent.InputTuple,
      WithdrawalCancelledEvent.OutputTuple,
      WithdrawalCancelledEvent.OutputObject
    >;
    WithdrawalCancelled: TypedContractEvent<
      WithdrawalCancelledEvent.InputTuple,
      WithdrawalCancelledEvent.OutputTuple,
      WithdrawalCancelledEvent.OutputObject
    >;

    'WithdrawalRequested(address)': TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
    WithdrawalRequested: TypedContractEvent<
      WithdrawalRequestedEvent.InputTuple,
      WithdrawalRequestedEvent.OutputTuple,
      WithdrawalRequestedEvent.OutputObject
    >;
  };
}
